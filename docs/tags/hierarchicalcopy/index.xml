<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hierarchicalcopy on zzamboni.org</title>
    <link>http://zzamboni.org/tags/hierarchicalcopy/</link>
    <description>Recent content in Hierarchicalcopy on zzamboni.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Aug 2010 00:28:00 -0500</lastBuildDate>
    
	<atom:link href="http://zzamboni.org/tags/hierarchicalcopy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hierarchical copying with cfengine3</title>
      <link>http://zzamboni.org/post/hierarchical-copying-with-cfengine3/</link>
      <pubDate>Fri, 27 Aug 2010 00:28:00 -0500</pubDate>
      
      <guid>http://zzamboni.org/post/hierarchical-copying-with-cfengine3/</guid>
      <description>I recently posted a snippet to perform hierarchical copying in cfengine3. As I was attempting to integrate this mechanism into my copy of cfengine&#39;s COPBL, I realized that no additional functions or body components are needed. Thanks to cfengine3&#39;s list expansion, all you need to do is include in the existing copy promise the list containing the desired list of suffixes to try. For example:
{% gist 552848 %}</description>
    </item>
    
    <item>
      <title>Implementing &#34;single-copy nirvana&#34; in cfengine3</title>
      <link>http://zzamboni.org/post/implementing-single-copy-nirvana-in-cfengine3/</link>
      <pubDate>Mon, 23 Aug 2010 01:56:35 -0500</pubDate>
      
      <guid>http://zzamboni.org/post/implementing-single-copy-nirvana-in-cfengine3/</guid>
      <description>Here is a sample implementation in cfengine3 of the technique described in the cfengine wiki as &#34;Singlecopy Nirvana&#34; for cfengine2. Cfengine3 makes the technique more powerful by allowing modularization, so that you can specify both the suffixes to try, and the files to copy using those suffixes, as variables. Also, cf3&#39;s automatic list expansion allows us to write a single copy statement that will be automatically expanded into all the different values to try.</description>
    </item>
    
  </channel>
</rss>