[
    {
        "uri": "/_index",
        "content": "---\ndate: 2017-08-03T22:37:17+02:00\ndescription: \"Musings, ramblings and code\"\n---\n",
        "tags": []
    },
    {
        "uri": "/about/_index",
        "content": "---\ntitle: \"About\"\ndate: 2017-08-03T12:50:11+02:00\nfeatured_image: \"/images/legoland.jpg\"\n---\n\nWho: I am a computer scientist, consultant, programmer, sysadmin,\nauthor, and overall geek. I am from Mexico but live in Switzerland\nwith my awesome wife and our two beautiful daughters.\n\nWhat: I work as the lead of a development team in the Cloud\nPlatform Division of Swisscom, where I am\napplying my experience and background in security, configuration\nmanagement, cloud computing and automation to build the\nnext-generation cloud infrastructure for Swisscom and its customers.\nI am also the author of \"Learning CFEngine 3\".\n\nWhere: I was born in Argentina, but have moved around all my life.\nWhen I was very young I moved to Mexico, where I lived in four different\ncities before moving to the U.S. to pursue my Ph.D. at [Purdue\nUniversity](http://www.cerias.purdue.edu/) under the direction of [Gene\nSpafford](http://spaf.cerias.purdue.edu/). Upon finishing my studies, my\nwife and I decided to go to Switzerland, where I worked at the [IBM\nZurich Research Lab](http://www.zurich.ibm.com/). After eight years, we\nmoved back to Mexico in late\n2009.\n\nLong version: If you are interested, here's my [curriculum\nvitae](/vita.html). For other useless trivia about me, see\nhere.\n\nThe online past: I had a blog called BrT which I\nclosed when I moved back to Mexico. I still keep a [static\ncopy](/brt/index.html) of it for reference. I also still have a [web\npage at Purdue University](http://homes.cerias.purdue.edu/~zamboni/),\nwith extremely old content.\n\nAbout this site\n\nThis entire site is served by GitHub through their\nincredibly useful Pages feature. All the\n\"top\" pages are stored in the main\nzzamboni.github.com\nrepository, which is devoted to this content. Most of my\nproject pages are stored in the\ngh-pages branch of their own github repositories. Since GitHub Pages\nsupports custom domains, all of them can be transparently hosted under\nthe zzamboni.org domain.\n\nI think it's incredible that all of this infrastructure is so easy to\nuse and available for free.\n\n Image attributions:\n\nC128 Code (code header background) is from the source code listing\n  from my Commodore 128 program [Supercataloguer\n  128](http://zzamboni.org/brt/2008/01/24/supercataloger-128).\nScrabble letters\n  (blog header background) from\n  Pexels, licensed under\n  CC0.\nAll other header background photos were taken either by my wife or\n  me.\n\nIf you have any concerns or questions about the images used in this\nsite, please let me know.\n",
        "tags": []
    },
    {
        "uri": "/book/_index",
        "content": "---\ntitle: \"Books\"\ndate: 2017-08-03T17:57:03+02:00\nfeatured_image: \"/images/book-box-thin.jpg\"\n---\n\n",
        "tags": []
    },
    {
        "uri": "/book/cfengine",
        "content": "---\ntitle: \"Learning CFEngine 3\"\ndate: 2017-08-03T17:56:58+02:00\ndraft: true\n---\n\nMy CFEngine book\n",
        "tags": []
    },
    {
        "uri": "/book/hammerspoon",
        "content": "---\ntitle: \"Hammerspoon\"\ndate: 2017-08-03T18:03:45+02:00\ndraft: true\n---\n\nMy Hammerspoon book\n\n",
        "tags": []
    },
    {
        "uri": "/code/_index",
        "content": "---\ntitle: \"Code\"\nitemname: \"Project\"\ndate: 2017-08-03T17:55:47+02:00\nfeatured_image: \"/images/c64-code3.png\"\n---\n\nHere you can find some of the programs I have written over the years,\nincluding both frequently maintained projects and some relatively\nobscure ones, small code snippets that I find useful, or old things\nthat I keep around for their sentimental or historical value.\n\n",
        "tags": []
    },
    {
        "uri": "/code/enwrite",
        "content": "---\ntitle: \"Enwrite\"\ndate: 2017-08-03T17:25:50+02:00\ndraft: true\n---\n\nAn Evernote-based static-website generation tool.\n\n!--more--\n\nblah blah blah\n\n",
        "tags": []
    },
    {
        "uri": "/code/grabcartoons",
        "content": "---\ntitle: \"Grabcartoons\"\ndate: 2017-08-03T17:25:50+02:00\ndescription: \"Grab your fix of the funnies\"\n---\n\nGrabCartoons is a comic-summarizing utility. It is modular, and it is\nvery easy to write modules for new comics.\n\n!--more--\n\n(ChangeLog)\n\nYou can see a sample of grabcartoons output\nhere.\n\nInstallation\n--------\n\nYou can download the latest source code for this project in either\nzip or\ntar formats.\n\nYou can also clone the project with Git by\nrunning:\n\n    $ git clone git://github.com/zzamboni/grabcartoons\n\nFrom within the source directory, run make install.\n\nAvailable comics\n----------------\n\nHere's the list of comics for which we currently have modules:\n\n{{ readfile file=\"/layouts/partials/grabcartoons/lom.txt\" }}\n\nGrabcartoons also includes templates that allow you to fetch any comic\nfrom a given site. At the moment we have the following templates:\n\n{{ highlight console }}\n{{ readfile file=\"/layouts/partials/grabcartoons/templates.txt\" }}\n{{ /highlight }}\n\nTo fetch a comic using a module, simply use template:comic as the\nspecification in the command line. name can be any unique part of the\ntitle of the comic you want.\n\nUsage\n-----\n\nBasic usage example:\n\n    $ grabcartoons.pl sinfest xkcd savage_chickens gocomics.com:gasoline  output.html\n\nAnd then open output.html in your web browser.\n\nFull set of options:\n\n{{ highlight console }}\n{{ readfile file=\"/layouts/partials/grabcartoons/usage.txt\" }}\n{{ /highlight }}\n\nContributions\n-------------\n\nIf you write any new modules, or have any suggestions, please share them\nwith us! You can post them at the [issue\ntracker](http://github.com/zzamboni/grabcartoons/issues), and we will\nadd them to a future release. Or just fork the code in\ngithub and then send a pull\nrequest.\n\nAuthors\n-------\n\nDiego Zamboni\\\nBenjamin Kuperman\\\n\n",
        "tags": []
    },
    {
        "uri": "/contact/_index",
        "content": "---\ntitle: \"Contact\"\ndate: 2017-08-03T17:55:04+02:00\nfeatured_image: \"/images/phone-booth-red-trimmed.jpg\"\n---\n\nIf you have any questions, comments or feedback about this site, please use the form below to send me a message.\n\n----\n\n{{ form-contact action=\"http://formspree.io/diego@zzamboni.org\" }}\n",
        "tags": []
    },
    {
        "uri": "/post/2013-04-25-ellen-on-password-security",
        "content": "---\ndate: 2013-04-25T14:46:00\ntitle: \"Ellen on password security\"\ntags:\nzznippets\nfun\nvideo\n---\nHilarious - Ellen on the \"Internet Password Minder\"\n\niframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/embed/SrhTVJ144\" frameborder=\"0\" allowfullscreen/iframe\n",
        "tags": []
    },
    {
        "uri": "/post/_index",
        "content": "---\ntitle: \"Blog\"\nitemname: \"Post\"\ndate: 2017-08-03T23:04:22+02:00\nfeatured_image: \"/images/scrabble-trim1-lowres.jpg\"\n---\n",
        "tags": []
    },
    {
        "uri": "/post/getting-started-with-hammerspoon",
        "content": "---\ntitle: \"Getting Started With Hammerspoon\"\ndate: 2017-08-15T21:31:31+02:00\ntoc: true\ndraft: true\ntags:\nhammerspoon\nhowto\nmac\n---\n\nWhat is Hammerspoon?\n\nHammerspoon is a Mac application maintained by Chris Jones and others,\nwhich acts as a thin layer between the operating system and a\nLua-based configuration language. Hammerspoon includes extensions for\nquerying and controlling many aspects of the system. Some of the\nlower-level extensions are written in Objective-C, but all of them\nexpose a Lua API, and it is trivial to write your own extensions or\nmodules (called \"Spoons\" in Hammerspoon) to extend its\nfunctionality. From the Hammerspoon configuration you can also execute\nexternal commands, run AppleScript or JavaScript code using the OSA\nscripting framework, establish network connections and even run\nnetwork servers; you can capture and generate keyboard events, you can\ndetect network changes, USB or audio devices being plugged in or out,\nchanges in screen or keyboard language configuration; you can draw\ndirectly on the screen to display whatever you want; and many other\nthings. Take a quick look at the [Hammerspoon API index\npage](http://www.hammerspoon.org/docs/index.html) to get a feeling of\nits extensive capabilities. And that is only the libraries that are\nbuilt into Hammerspoon. There is an extensive and growing [collection\nof Spoons](http://www.hammerspoon.org/Spoons/), modules written in\npure Lua that provide additional functionality and integration. And of\ncourse, you can write your own code. So let’s get started!\n\n Installing Hammerspoon\n\nHammerspoon is a regular Mac application. To install it by hand, you\njust need to download it from\nhttps://github.com/Hammerspoon/hammerspoon/releases/latest, unzip\nthe downloaded file and drag it to your /Applications folder (or\nanywhere else you want).\n\nIf you are automation-minded like me, you probably use\nHomebrew and its plugin\nCask to manage your applications. If\nthis is the case, you can use Cask to install Hammerspoon:\n\nbrew cask install hammerspoon\n\nWhen you run Hammerspoon for the first time, you will see its icon\nappear in the menubar, and a notification telling you that it couldn’t\nfind a configuration file. Let’s fix that!\n\n{{ figure src=\"/ng/figures/hammerspoon-startup.png\" }}\n\n Tip\n\n If you click on the initial notification, your web browser will open\n to the excellent [Getting Started with\n Hammerspoon](http://www.hammerspoon.org/go/) page, which I highly\n recommend you read for more examples.\n\nYour first Hammerspoon configuration\n\nLet us start with a few simple examples. As tradition mandates, we\nwill start with a \"Hello World\" example. Open\n$HOME/.hammerspoon/init.lua (Hammerspoon will create the directory\nupon first startup, but you need to create the file) in your favorite\neditor, and type the following:\n\nhs.hotkey.bindSpec({ { \"ctrl\", \"cmd\", \"alt\" }, \"h\" }, \n   function() \n      hs.notify.show(\"Hello World!\", \"Welcome to Hammerspoon\", \"\") \n   end)\n\nSave the file, and from the Hammerspoon icon in the menubar, select\n\"Reload config\". Apparently nothing will happen, but if you then press\nControl-Alt-Command-h on your keyboard, you will see a notification on\nyour screen welcoming you to the world of Hammerspoon.\n\n{{ figure src=\"/ng/figures/hammerspoon-hello-world.png\" }}\n\nAlthough it should be fairly self-explanatory, let us dissect this\nexample to give you a clearer understanding of its components:\n\nAll Hammerspoon built-in extensions start with hs. In this case,\nhs.hotkey is the extension that handles keyboard bindings. You can\nfind its documentation at\nhttp://www.hammerspoon.org/docs/hs.hotkey.html, where you will see\nthat it allows you to easily define which functions will be called in\nresponse to different keyboard combinations. You can even\ndifferentiate between the keys being pressed, released or held down if\nyou need to. The other extension used in this example is hs.notify,\nwhich allows us to interact with the macOS Notification Center to\ndisplay, react and interact with notifications.\n\nWithin hs.hotkey, the hs.hotkey.bindSpec() function allows you\n    to bind a function to a pressed key. Its first argument is a key\n    specification which consists of a list (Lua lists and table\n    literals are represented using curly braces) with two elements: a\n    list of the key modifiers, and the key itself. In this example, `{\n    { \"ctrl\", \"cmd\", \"alt\" }, \"h\" }` represents pressing\n    {{ keys Ctrl \"⌘\" Alt h }}.\n\nThe second argument to bindSpec() is the function to call when\n    the key is pressed. Here we are defining an inline function, so it\n    does not need a name.\n\nThe callback function uses hs.notify.show() to display the\n    message.Take a quick look at the hs.notify documentation at\n    http://www.hammerspoon.org/docs/hs.notify.html to get an idea of\n    its extensive capabilities, including configuration of all aspects\n    of a notification’s appearance and buttons, and the functions to\n    call upon different user actions.\n\nTry changing the configuration to display a different message or use a\ndifferent key. After every change, you need to instruct Hammerspoon to\nreload its configuration, which you can do through its menubar item.\n\n Debugging tools and the Hammerspoon console\n\nAs you start modifying your configuration, errors will happen, as they\nalways do when coding. To help in development and debugging,\nHammerspoon offers a console window where you can see any errors and\nmessages printed by your Lua code as it executes, and also type code\nto be evaluated. It is a very useful tool while developing your\nHammerspoon configuration.\n\nTo invoke the console, you normally choose \"Console…​\" from the\nHammerspoon menubar item. However, this is such a common operation,\nthat you might find it useful to also set a key combination for\nshowing the console. Most of Hammerspoon’s internal functionality is\nalso accessible through its API. In this case, looking at the\n[documentation for the main hs\nmodule](http://www.hammerspoon.org/docs/hs.html) reveals that there is\nan hs.toggleConsole() function. Using the knowledge you’ve acquired\nso far, you can easily configure a hotkey for opening and hiding the\nconsole:\n\nhs.hotkey.bindSpec({ { \"ctrl\", \"cmd\", \"alt\" }, \"y\" },\n                   hs.toggleConsole)\n\nOnce you reload your configuration, you should be able to use {{< keys\nCtrl \"⌘\" Alt y }} to open and close the console. Any Lua code you\ntype in the Console will be evaluated in the main Hammerspoon context,\nso you can add to your configuration directly from there. This is a\ngood way to incrementally develop your code before committing it to\nthe init.lua file.\n\nYou may have noticed by now another common operation while developing\nHammerspoon code: reloading the configuration, which you normally have\nto do from the Hammerspoon menu. So why not set up a hotkey to do that\nas well? Again, the hs module comes to our help with the\nhs.reload() method:\n\nhs.hotkey.bindSpec({ { \"ctrl\", \"cmd\", \"alt\" }, \"r\" }, hs.reload)\n\nAnother useful development tool is the hs command, which you can run\nfrom your terminal to get a Hammerspoon console. To install it, you\ncan use the hs.ipc.cliInstall() function, which you can just add to\nyour init.lua file to check and install the command every time\nHammerspoon runs.\n\n Tip\n\n hs.ipc.cliInstall() creates symlinks under /usr/local/ to the\n hs command and its manual page file, located inside the\n Hammerspoon application bundle. Under some circumstances\n (particularly if you build Hammerspoon from source, or if you\n install different versions of it), you may end up with broken\n symlinks. If the hs command stops working and cliInstall()\n doesn’t fix it, look for broken symlinks left behind from old\n versions of Hammerspoon. Remove them and things should work again.\n\nNow you have all the tools for developing your Hammerspoon\nconfiguration. In the next installmente we will look at how you can\nsave yourself a lot of coding by using pre-made modules.\n",
        "tags": []
    },
    {
        "uri": "/post/the-big-website-reboot",
        "content": "---\ntitle: \"The Big Website Reboot\"\ndate: 2017-08-08T06:56:52+02:00\ntags:\nsitenews\n---\n\nWelcome to the new zzamboni.org.\n\n!--more--\n\nOver the years, my website has seen its fair share of transformations,\nchange and breakage. For a few years now, it had stagnated - me with\nnot having much time to update, and its accumulated technological\ncruft piling high enough to keep me from even touching it, lest I\nbreak something.\n\nSo, the time has come to do a reboot. With this post, I'm launching\nthe new and reinvented zzamboni.org. Through\nprevious incarnations I had always tried to preserve backwards\ncompatibility in my URLs so people could still find my old stuff, but\nthis has become too big a burden. I may add some things under their\nold location, and I may add over time some tools to make it easier to\nfind the old stuff, but in general this won't be a concern and I will\nnot let it stop me from adding new content.\n\nOver the years, the underlying technologies have changed (Wordpress,\nPosterous, Jekyll, Octopress, Enwrite). As a tech guy, I always enjoy\nplaying with new toys. For now I have settled on using\nHugo, a great static-website generator, using its\nAnanke theme. Hugo\nand Ananke are powerful and flexible to satisfy my needs, both current\nand future, as far as I can foresee them. The website continues to be\nhosted through the fantastic [Github\nPages](https://pages.github.com/).\n\nSo this is it. For now the site is mostly empty, but new content will\nbe appearing shortly, both new and ported from my old website. Please\ntake a look around, and let me know if you find anything\nbroken.\n",
        "tags": []
    }
]