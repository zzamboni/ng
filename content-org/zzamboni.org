#+hugo_base_dir: ../
#+seq_todo: TODO DRAFT DONE
#+options: creator:t
#+property: header-args :eval never-export

#+macro: updatetime {{{time(%B %e\, %Y)}}}

#+title: zzamboni.org source file
#+author: Diego Zamboni
#+email: diego@zzamboni.org

This file is the source for all new and updated content on [[http://zzamboni.org/][my website]] since March 2018. Content here may be in progress or incomplete. This file gets converted to [[http://gohugo.io/][Hugo]] files by the excellent [[https://ox-hugo.scripter.co/][ox-hugo]].

*You really should not read it here but at [[http://zzamboni.org/][zzamboni.org]]*.

* Table of Contents                                            :TOC_3:noexport:
- [[#pages][Pages]]
  - [[#about][About]]
    - [[#about-this-site][About this site]]
    - [[#image-attributions][Image attributions:]]
  - [[#contact][Contact]]
  - [[#books][Books]]
- [[#book-pages][Book pages]]
  - [[#learning-cfengine-3][Learning CFEngine 3]]
- [[#ideas][Ideas]]
  - [[#using-and-extending-seal][Using and extending Seal]]
  - [[#sending-things-to-omnifocus][Sending things to OmniFocus]]
  - [[#ox-hugo][ox-hugo]]
  - [[#cryfs][CryFS]]
  - [[#hosting-a-hugo-blog-in-github][Hosting a Hugo blog in GitHub]]
  - [[#using-the-nix-package-manager-in-macos][Using the Nix package manager in macOS]]
- [[#posts][Posts]]
  - [[#literate-config-files][Literate config files]]
    - [[#my-emacs-configuration-with-commentary][My Emacs Configuration, With Commentary]]
    - [[#my-hammerspoon-configuration-with-commentary][My Hammerspoon Configuration, With Commentary]]
    - [[#my-elvish-configuration-with-commentary][My Elvish Configuration With Commentary]]
  - [[#emacs][Emacs]]
    - [[#beautifying-org-mode-in-emacs][Beautifying Org Mode in Emacs]]
  - [[#hammerspoon][Hammerspoon]]
  - [[#elvish][Elvish]]
    - [[#bang-bang---shell-shortcuts-in-elvish][Bang-Bang (!!, !$) Shell Shortcuts in Elvish]]
- [[#footnotes][Footnotes]]

* Pages

This section contains all the static pages.

** DONE About
CLOSED: [2018-03-22 Thu 19:40]
:PROPERTIES:
:export_hugo_section: about
:export_hugo_custom_front_matter: :featured_image /images/legoland.jpg
:export_hugo_weight: 06
:export_file_name: _index
:export_hugo_aliases: /about.html
:END:

*Who:* I am a computer scientist, consultant, programmer, sysadmin, author and overall geek, now turned project leader and engineering team manager. I am from Mexico but live in Switzerland with my awesome wife and our two beautiful daughters.

*What:* I work as the lead of a development team in the Cloud Platform Division of [[http://swisscom.com/][Swisscom]], where I am applying my experience and background in security, configuration management, cloud computing and automation to build the next-generation cloud infrastructure for Swisscom and its customers. I am also the author of [[http://cf-learn.info]["Learning CFEngine 3"]].

*Where:* I was born in Argentina, but have moved around all my life.  When I was very young I moved to Mexico, where I lived in four different cities before moving to the U.S. to pursue my Ph.D. at [[http://www.cerias.purdue.edu/][Purdue University]] under the direction of [[http://spaf.cerias.purdue.edu/][Gene Spafford]]. Upon finishing my studies, my wife and I decided to go to Switzerland, where I worked at the [[http://www.zurich.ibm.com/][IBM Zurich Research Lab]]. Eight years and two kids later, we [[/brt/2009/09/08/going-home/index.html][moved to Mexico]] in late 2009. In 2015, we moved back to Switzerland.

*Long version:* If you are interested, here's my [[/vita.html][curriculum vitae]]. For other useless trivia about me, see [[http://www.zzamboni.org/brt/2007/03/07/blog-tagged/index.html][here]].

*My online past:*

-  2009-2016: All old blog entries have been incorporated onto [[/post][this blog]];
-  2005-2009: My blog titled [[/brt][BrT]] (static archive copy);
-  1997-2001: My [[http://homes.cerias.purdue.edu/~zamboni/][web page at Purdue University]].

*** About this site

This entire site is generated by [[http://gohugo.io][Hugo]] and served by [[http://github.com/][GitHub]] through the incredibly useful [[http://pages.github.com/][GitHub Pages]] feature.

Both the source and the generated website are stored in the [[https://github.com/zzamboni/zzamboni.org][zzamboni/zzamboni.org]] GitHub repository, which is devoted to this content.  Recently I started using [[https://ox-hugo.scripter.co/][ox-hugo]] to generate the content from [[https://github.com/zzamboni/zzamboni.org/blob/master/content-org/zzamboni.org][a single source file]] in [[https://orgmode.org/][org-mode]] format, although all the older articles and pages are still stored in their original source Markdown files (I gradually convert them whenever I update them). Some of my [[/code][project]] pages are stored in the =gh-pages= branch of their own github repositories. Since GitHub Pages supports custom domains, all of them can be transparently hosted under the zzamboni.org domain.

I think it's incredible that all of this infrastructure is so easy to use and available for free.

*** Image attributions:

-  C128 Code (code header background) is from the source code listing from my Commodore 128 program [[http://zzamboni.org/brt/2008/01/24/supercataloger-128][Supercataloguer 128]].
-  [[https://www.pexels.com/photo/alphabet-board-game-bundle-close-up-278888/][Scrabble letters]] ([[../post][blog]] header background) from [[https://www.pexels.com/][Pexels]], licensed under [[https://www.pexels.com/photo-license/][CC0]].
-  All other header background photos were taken either by my wife or me.

If you have any concerns or questions about the images used in this site, please [[../contact][let me know]].

** DONE Contact
CLOSED: [2018-03-25 Sun 18:34]
:PROPERTIES:
:export_hugo_section: contact
:export_hugo_custom_front_matter: :featured_image /images/phone-booth-red-trimmed.jpg
:export_hugo_weight: 05
:export_file_name: _index
:export_hugo_aliases: /contact.html
:END:

If you have any questions, comments or feedback about this site, please use the form below to send me a message.

----

{{< form-contact action="http://formspree.io/diego@zzamboni.org" >}}

** DONE Books
CLOSED: [2018-03-25 Sun 20:11]
:PROPERTIES:
:export_hugo_section: book
:export_hugo_custom_front_matter: :featured_image /images/book-box-thin.jpg
:export_hugo_weight: 02
:export_file_name: _index
:END:

* Book pages

The individual pages for each book.

** DONE Learning CFEngine 3
CLOSED: [2018-03-25 Sun 21:05]
:PROPERTIES:
:export_hugo_section: book
:export_file_name: cfengine
:export_hugo_custom_front_matter: :finalURL http://cf-learn.info/
:END:

{{< bookimglink style="float:right" >}}

I am the author of "Learning CFEngine 3", the best book for learning [[http://cfengine.com/][CFEngine]].

The book has its own webpage at http://cf-learn.info, please visit it for more information, code samples, etc.

You can buy the book from Amazon by clicking the link on the right.

#+hugo: more

\nbsp

* Ideas
:PROPERTIES:
:export_hugo_section: post
:END:

Ideas for things to write about.

** TODO Using and extending Seal                              :hammerspoons:
** TODO Sending things to OmniFocus                            :hammerspoon:
** TODO ox-hugo                                                 :emacs:hugo:
** TODO CryFS                                                  :cryfs:howto:
** TODO Hosting a Hugo blog in GitHub           :hugo:github:blogging:howto:
Short guide to setting up Hugo, using /docs to host to avoid branches, and setting up your custom domain.
** TODO Using the Nix package manager in macOS             :howto:nix:macos:

* Posts
:PROPERTIES:
:export_hugo_section: post
:END:

Blog posts.

** Literate config files                  :config:howto:literateprogramming:

I group here the posts about my documented config files, which include the live files from my current configuration.

*** DONE My Emacs Configuration, With Commentary                    :emacs:
CLOSED: [2017-12-17 Sun 20:14]
:properties:
:export_file_name: 2017-12-17-my-emacs-configuration-with-commentary
:export_hugo_custom_front_matter: :featured_image /images/emacs-logo.svg :toc true :summary I have enjoyed slowly converting my configuration files to literate programming style using org-mode in Emacs. It's now the turn of my Emacs configuration file.
:end:

Last update: *{{{updatetime}}}*

I have enjoyed slowly converting my configuration files to [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming]] style style using org-mode in Emacs. I previously posted my [[../my-elvish-configuration-with-commentary/][Elvish configuration]], and now it's the turn of my Emacs configuration file. The text below is included directly from my [[https://github.com/zzamboni/dot_emacs/blob/master/init.org][init.org]] file. Please note that the text below is a snapshot as the file stands as of the date shown above, but it is always evolving. See the [[https://github.com/zzamboni/dot_emacs/blob/master/init.org][init.org file in GitHub]] for my current, live configuration, and the generated file at [[https://github.com/zzamboni/dot_emacs/blob/master/init.el]].

#+include: "~/.emacs.d/init.org" :lines "19-"

*** DONE My Hammerspoon Configuration, With Commentary        :hammerspoon:
CLOSED: [2018-01-08 Mon 13:31]
:PROPERTIES:
:EXPORT_FILE_NAME: 2018-01-08-my-hammerspoon-configuration-with-commentary
:export_hugo_custom_front_matter: :toc true :featured_image /images/hammerspoon.png :summary In my ongoing series of literate config files, I present to you my Hammerspoon configuration file.
:END:

Last update: *{{{updatetime}}}*

In my [[../my-elvish-configuration-with-commentary/][ongoing]] [[../my-emacs-configuration-with-commentary][series]] of [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate]] config files, I present to you my [[http://www.hammerspoon.org/][Hammerspoon]] configuration file. You can see the generated file at [[https://github.com/zzamboni/dot-hammerspoon/blob/master/init.lua]]. As usual, this is just a snapshot at the time shown above, you can see the current version of my configuration [[https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org][in GitHub]].

#+include: "~/.hammerspoon/init.org" :lines "19-"

*** DONE My Elvish Configuration With Commentary                   :elvish:
CLOSED: [2017-11-16 Thu 20:21]
:PROPERTIES:
:export_file_name: 2017-11-16-my-elvish-configuration-with-commentary
:export_hugo_custom_front_matter: :toc true :featured_image /images/elvish-logo.svg :summary In this blog post I will walk you through my current Elvish configuration file, with running commentary about the different sections.
:END:

Last update: *{{{updatetime}}}*

In this blog post I will walk you through my current [[http://elvish.io][Elvish]] configuration file, with running commentary about the different sections.

This is also my first blog post written using [[http://orgmode.org/][org-mode]], which I have started using for writing and documenting my code, using [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming]]. The content below is included unmodified from my [[https://github.com/zzamboni/dot-elvish/blob/master/rc.org][rc.org file]] (as of the date shown above), from which the [[https://github.com/zzamboni/dot-elvish/blob/master/rc.elv][rc.elv]] file is directly generated.

Without further ado...

#+include: "~/.elvish/rc.org" :lines "19-"

** Emacs                                                             :emacs:
*** DONE Beautifying Org Mode in Emacs      :orgmode:beautifulemacs:config:
CLOSED: [2018-03-21 Wed 22:45]
:PROPERTIES:
:export_file_name: 2018-03-21-using-proportional-fonts-in-emacs-with-org-mode
:export_hugo_custom_front_matter: :toc true :featured_image /images/emacs-logo.svg :summary Configuring Org Mode in Emacs for beautiful typography for both text and code editing.
:END:

Over the last few months, I have used [[https://orgmode.org/][org-mode]] more and more for writing and programming in Emacs. I love its flexibility and power, and it is the first [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming]] tool which "feels right", and I have been able to stick with it for a longer period of time than in my previous attempts.

Recently I started thinking about how I could make my editing environment more visually appealing. I am in general very happy with my Emacs appearance thanks for the [[https://github.com/Greduan/emacs-theme-gruvbox][Gruvbox theme]], and org-mode has very decent syntax highlighting. But as I write more and more prose in Emacs these days, I started thinking it might be nice to edit text in more visually-appealing fonts, including using a proportional font, which makes regular prose much more readable. I would like to share with you what I learned and my current Emacs configuration.

In the end, you can have an Emacs setup for editing org documents which looks very nice, with proportional fonts for text and monospaced fonts for code blocks, examples and other elements. To wet your appetite, here is what a fragment of my [[https://github.com/zzamboni/dot-emacs/blob/master/init.org][init.org]] file looks like:

[[file:images/emacs-init-propfonts.png][file:images/emacs-init-propfonts.png]]

**** Step 1: Configure faces for Org headlines and lists

My first step was to make  org-mode much more readable by using different fonts for headings, hiding some of the markup, and improving list bullets. I took these settings originally from Howard Abrams' excellent [[http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html][Org as a Word Processor]] article, although I have tweaked them a bit.

First, we ask org-mode to hide the emphasis markup (e.g. =/.../= for italics, =*...*= for bold, etc.):

#+begin_src emacs-lisp :tangle no
  (setq org-hide-emphasis-markers t)
#+end_src

Then, we set up a font-lock substitution for list markers (I always use "=-=" for lists, but you can change this if you want) by replacing them with a centered-dot character:

#+begin_src emacs-lisp :tangle no
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

The =org-bullets= package replaces all headline markers with different Unicode bullets:

#+begin_src emacs-lisp :tangle no
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

Finally, we set up a nice proportional font, in different sizes, for the headlines. The fonts listed will be tried in sequence, and the first one found will be used. Feel free to add your own favorite font:

#+begin_src emacs-lisp :tangle no
  (let* ((variable-tuple
          (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
#+end_src

**** Step 2: Setting up =variable-pitch= and =fixed-pitch= faces

My next realization was that Emacs already includes support for displaying proportional fonts with the =variable-pitch-mode= command. You can try it right now: type ~M-x~ =variable-pitch-mode= and your current buffer will be shown in a proportional font (you can disable it by running =variable-pitch-mode= again). On my Mac the default variable-pitch font is Helvetica. You can change the font used by configuring the =variable-pitch= face. You can do this interactively through the customize interface by typing ~M-x~ =customize-face= =variable-pitch=. At the moment I like [[https://en.wikipedia.org/wiki/Source_Sans_Pro][Source Sans Pro]].

As a counterpart to =variable-pitch=, you need to configure the =fixed-pitch= face for the text that needs to be shown in a monospaced font. My first instinct was to inherit this from my =default= face (I use [[https://en.wikipedia.org/wiki/Inconsolata][Inconsolata]]), but it seems that this gets remapped when =variable-pitch-mode= is active, so I had to configure it by hand with the same font as my =default= face.

What I would suggest is that you customize the fonts interactively, as you can see live how it looks on your text. You can make the configuration permanent from the customize screen as well. If you want to explicitly set them in your configuration file, you can do it with the =custom-theme-set-faces= function, like this:

#+begin_src emacs-lisp
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Sans Pro" :height 180 :weight light))))
   '(fixed-pitch ((t ( :family "Inconsolata" :slant normal :weight normal :height 1.0 :width normal)))))
#+end_src

*Tip:* you can get the LISP expression for your chosen font (the part that looks like =((t (:family ... )))= from the =customize-face= screen - open the "State" button and choose the "Show Lisp Expression" menu item.

You can enable =variable-pitch-mode= automatically for org buffers by setting up a hook like this:

#+begin_src emacs-lisp :tangle no
  (add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src

**** Step 2: Use long lines and =visual-line-mode=

One thing you will notice right away with proportional fonts is that filling paragraphs no longer makes sense. This is because =fill-paragraph= works based on the number of characters in a line, but with a proportional font, characters have different widths, so a filled paragraph looks strange:

[[file:images/emacs-filled-paragraph.png][file:images/emacs-filled-paragraph.png]]

Of course, you can still do it, but there's a better way. With =visual-line-mode= enabled, long lines will flow and adjust to the width of the window. This is great for writing prose, because you can choose how wide your lines are by just resizing your window.

[[file:images/emacs-narrow-window.png][file:images/emacs-narrow-window.png]]

[[file:images/emacs-wide-window.png][file:images/emacs-wide-window.png]]

There is one habit you have to change for this to work: the instinct (at least for me) of pressing ~M-q~ every once in a while to readjust the current paragraph. I personally think it's worth it.

You can enable =visual-line-mode= automatically for org buffers by setting up another hook:

#+begin_src emacs-lisp :tangle no
  (add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

**** Step 4: Configure faces for specific Org elements

After all the changes above, you will have nice, proportional fonts in your Org buffers. However, there are some things for which you still want monospace fonts! Things like source blocks, examples, tags and some other markup elements still look better in a fixed-spacing font, in my opinion. Fortunately, org-mode has an extremely granular face selection, so you can easily customize them to have different elements shown in the correct font, color, and size.

*Tip:* you can use ~C-u~ ~C-x~ ~=~ (which runs the command =what-cursor-position= with a prefix argument) to show information about the character under the cursor, including the face which is being used for it. If you find a markup element which is not correctly configured, you can use this to know which face you have to customize.

You can configure specific faces any way you want, but if you simply want them to be rendered in monospace font, you can set them to inherit from the =fixed-pitch= face we configured before. You can also inherit from multiple faces to combine their attributes.

Here are the faces I have configured so far (there are probably many more to do, but I don't use org-mode to its full capacity yet). I'm showing here the LISP expressions, but you can just as well configure them using =customize-face=.

#+begin_src emacs-lisp
  (custom-theme-set-faces
   'user
   '(org-block                 ((t (:inherit fixed-pitch))))
   '(org-document-info         ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-link                  ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line             ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value        ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim              ((t (:inherit (shadow fixed-pitch))))))
#+end_src

One minor issue I have noticed is that, in =variable-pitch-mode=, the fixed-pitch blocks have a slight increase in inter-line spacing. This is not a deal breaker for me, but it is a noticeable difference. This can be observed in the following screenshot, which shows the block of code above embedded in the org-mode buffer and in the block-editing buffer, which uses the fixed-width font. If you know a way in which this could be fixed, please let me know!

[[file:images/emacs-differing-heights.png][file:images/emacs-differing-heights.png]]

**** Conclusion

The setup described above has considerably improved my enjoyment of writing in Emacs. I hope you find it useful. If you have any feedback, suggestions or questions, please let me know in the comments.

** Hammerspoon                                                 :hammerspoon:
** Elvish                                                           :elvish:
*** DONE Bang-Bang (!!, !$) Shell Shortcuts in Elvish   :shell:unix:config:
CLOSED: [2017-12-04 Mon 22:15]
:PROPERTIES:
:export_file_name: 2017-12-04-bang-bang-shortcuts-in-elvish
:export_hugo_custom_front_matter: :featured_image /images/elvish-logo.svg :summary How to set up the bash !! and !$ shortcuts for accessing the previous command in Elvish.
:END:

(Updated on March 19th, 2018 to use the new [[https://elvish.io/ref/epm.html][Elvish Package Manager]])

The bash shortcuts (maybe older? I'm not sure in which shell these originated) for "last command" (=!!=) and "last argument of last command" (=!$=) are, for me at least, among the most strongly imprinted in my muscle memory, and I use them all the time. Although these shortcuts are not available in [[/post/elvish-an-awesome-unix-shell/][Elvish]] by default, they are easy to implement. I have written a module called [[https://github.com/zzamboni/elvish-modules/blob/master/bang-bang.org][bang-bang]] which you can readily use as follows:

- Use [[https://elvish.io/ref/epm.html][epm]] to install my elvish-modules package (you can also add this to your =rc.elv= file to have the package installed automatically if needed):

  #+begin_src elvish
    use epm
    epm:install github.com/zzamboni/elvish-modules
  #+end_src

- In your =rc.elv= (see [[/post/my-elvish-configuration-with-commentary/][mine]] as an example), add the following to load the =bang-bang= module and to set up the appropriate keybindings:

  #+BEGIN_SRC elvish
    use github.com/zzamboni/elvish-modules/bang-bang
  #+END_SRC

That's it! Start a new shell window, and test how command-history mode can be invoked by the =!= key. Assuming your last command was =ls -l ~/.elvish/rc.elv=, when you press =!= you will see the following:

#+BEGIN_EXAMPLE
  bang-lastcmd [A C] _
  ! ls -l .elvish/rc.elv
  0 ls
  1 -l
  2/$ .elvish/rc.elv
  Alt-! !
#+END_EXAMPLE

If you press =!= again, the whole last command will be inserted. If you press =$= (or =2=), only the last argument will be inserted. You can insert any other component of the previous command using its corresponding number. If you want to insert an exclamation sign, you can press =Alt-!=.

Note that by default, =Alt-!= will also be bound to trigger this mode, so you can fully replace the default [[https://elvish.io/learn/cookbook.html]["last command" mode]] in Elvish.

Have fun with Elvish!
* Footnotes
* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (add-hook 'after-save-hook #'org-hugo-export-wim-to-md-after-save :append :local)
# End:
